searchData={"content_type":"text/plain","items":[{"doc":"berpikir_dalam_erlang public API","ref":"berpikir_dalam_erlang_app.html","title":"berpikir_dalam_erlang_app","type":"module"},{"doc":null,"ref":"berpikir_dalam_erlang_app.html#start/2","title":"berpikir_dalam_erlang_app.start/2","type":"function"},{"doc":null,"ref":"berpikir_dalam_erlang_app.html#stop/1","title":"berpikir_dalam_erlang_app.stop/1","type":"function"},{"doc":"berpikir_dalam_erlang top level supervisor.","ref":"berpikir_dalam_erlang_sup.html","title":"berpikir_dalam_erlang_sup","type":"module"},{"doc":null,"ref":"berpikir_dalam_erlang_sup.html#init/1","title":"berpikir_dalam_erlang_sup.init/1","type":"function"},{"doc":null,"ref":"berpikir_dalam_erlang_sup.html#start_link/0","title":"berpikir_dalam_erlang_sup.start_link/0","type":"function"},{"doc":null,"ref":"complex1.html","title":"complex1","type":"module"},{"doc":null,"ref":"complex1.html#bar/1","title":"complex1.bar/1","type":"function"},{"doc":null,"ref":"complex1.html#foo/1","title":"complex1.foo/1","type":"function"},{"doc":null,"ref":"complex1.html#init/1","title":"complex1.init/1","type":"function"},{"doc":null,"ref":"complex1.html#start/1","title":"complex1.start/1","type":"function"},{"doc":null,"ref":"complex1.html#stop/0","title":"complex1.stop/0","type":"function"},{"doc":null,"ref":"concurrency_example.html","title":"concurrency_example","type":"module"},{"doc":null,"ref":"concurrency_example.html#receiver/0","title":"concurrency_example.receiver/0","type":"function"},{"doc":null,"ref":"concurrency_example.html#sender/1","title":"concurrency_example.sender/1","type":"function"},{"doc":null,"ref":"concurrency_example.html#start/0","title":"concurrency_example.start/0","type":"function"},{"doc":null,"ref":"echo_client.html","title":"echo_client","type":"module"},{"doc":null,"ref":"echo_client.html#send/1","title":"echo_client.send/1","type":"function"},{"doc":null,"ref":"echo_server.html","title":"echo_server","type":"module"},{"doc":null,"ref":"echo_server.html#code_change/3","title":"echo_server.code_change/3","type":"function"},{"doc":null,"ref":"echo_server.html#handle_call/3","title":"echo_server.handle_call/3","type":"function"},{"doc":null,"ref":"echo_server.html#handle_cast/2","title":"echo_server.handle_cast/2","type":"function"},{"doc":null,"ref":"echo_server.html#handle_info/2","title":"echo_server.handle_info/2","type":"function"},{"doc":null,"ref":"echo_server.html#init/1","title":"echo_server.init/1","type":"function"},{"doc":null,"ref":"echo_server.html#start_link/0","title":"echo_server.start_link/0","type":"function"},{"doc":null,"ref":"echo_server.html#terminate/2","title":"echo_server.terminate/2","type":"function"},{"doc":null,"ref":"fault_tolerance.html","title":"fault_tolerance","type":"module"},{"doc":null,"ref":"fault_tolerance.html#init/1","title":"fault_tolerance.init/1","type":"function"},{"doc":null,"ref":"fault_tolerance.html#start_link/0","title":"fault_tolerance.start_link/0","type":"function"},{"doc":null,"ref":"fault_tolerance.html#supervisor_spec/0","title":"fault_tolerance.supervisor_spec/0","type":"function"},{"doc":null,"ref":"fault_tolerance.html#worker/1","title":"fault_tolerance.worker/1","type":"function"},{"doc":"An OTP gen_server example","ref":"hello_server.html","title":"hello_server","type":"module"},{"doc":null,"ref":"hello_server.html#code_change/3","title":"hello_server.code_change/3","type":"function"},{"doc":null,"ref":"hello_server.html#get_count/0","title":"hello_server.get_count/0","type":"function"},{"doc":null,"ref":"hello_server.html#handle_call/3","title":"hello_server.handle_call/3","type":"function"},{"doc":null,"ref":"hello_server.html#handle_cast/2","title":"hello_server.handle_cast/2","type":"function"},{"doc":null,"ref":"hello_server.html#handle_info/2","title":"hello_server.handle_info/2","type":"function"},{"doc":null,"ref":"hello_server.html#init/1","title":"hello_server.init/1","type":"function"},{"doc":null,"ref":"hello_server.html#say_hello/0","title":"hello_server.say_hello/0","type":"function"},{"doc":null,"ref":"hello_server.html#start_link/0","title":"hello_server.start_link/0","type":"function"},{"doc":null,"ref":"hello_server.html#stop/0","title":"hello_server.stop/0","type":"function"},{"doc":null,"ref":"hello_server.html#terminate/2","title":"hello_server.terminate/2","type":"function"},{"doc":null,"ref":"module.html","title":"module","type":"module"},{"doc":null,"ref":"module.html#start/0","title":"module.start/0","type":"function"},{"doc":null,"ref":"my_html_generator.html","title":"my_html_generator","type":"module"},{"doc":null,"ref":"my_html_generator.html#generate_html/0","title":"my_html_generator.generate_html/0","type":"function"},{"doc":"A simple server that does not use OTP.","ref":"no_otp.html","title":"no_otp","type":"module"},{"doc":null,"ref":"no_otp.html#get_count/0","title":"no_otp.get_count/0","type":"function"},{"doc":null,"ref":"no_otp.html#init/0","title":"no_otp.init/0","type":"function"},{"doc":null,"ref":"no_otp.html#say_hello/0","title":"no_otp.say_hello/0","type":"function"},{"doc":null,"ref":"no_otp.html#start/0","title":"no_otp.start/0","type":"function"},{"doc":null,"ref":"no_otp.html#stop/0","title":"no_otp.stop/0","type":"function"},{"doc":null,"ref":"pattern_matching.html","title":"pattern_matching","type":"module"},{"doc":null,"ref":"pattern_matching.html#start/0","title":"pattern_matching.start/0","type":"function"},{"doc":null,"ref":"receiver.html","title":"receiver","type":"module"},{"doc":null,"ref":"receiver.html#loop/0","title":"receiver.loop/0","type":"function"},{"doc":null,"ref":"receiver.html#start/0","title":"receiver.start/0","type":"function"},{"doc":null,"ref":"sender.html","title":"sender","type":"module"},{"doc":null,"ref":"sender.html#send/1","title":"sender.send/1","type":"function"},{"doc":null,"ref":"tipe_data.html","title":"tipe_data","type":"module"},{"doc":null,"ref":"tipe_data.html#start/0","title":"tipe_data.start/0","type":"function"},{"doc":null,"ref":"tipe_record.html","title":"tipe_record","type":"module"},{"doc":null,"ref":"tipe_record.html#start/0","title":"tipe_record.start/0","type":"function"},{"doc":null,"ref":"top_module.html","title":"top_module","type":"module"},{"doc":null,"ref":"top_module.html#look/0","title":"top_module.look/0","type":"function"},{"doc":null,"ref":"word_counter.html","title":"word_counter","type":"module"},{"doc":null,"ref":"word_counter.html#count_words/1","title":"word_counter.count_words/1","type":"function"},{"doc":null,"ref":"word_counter.html#display_result/1","title":"word_counter.display_result/1","type":"function"},{"doc":null,"ref":"word_counter.html#read_input/0","title":"word_counter.read_input/0","type":"function"},{"doc":null,"ref":"word_counter.html#start/0","title":"word_counter.start/0","type":"function"},{"doc":"# berpikir dalam erlang\n\n\nRepo ini berisi semua catatan pribadi tentang bahasa pemrograman Erlang/OTP","ref":"readme.html","title":"berpikir dalam erlang","type":"extras"},{"doc":"----------------------------------------------------\n\nBuild\n-----\n\n```terminal\n$ rebar3 compile\n```\n\nBuild documentation\n-------------------\n\n```terminal\n$ rebar3 ex_doc -o docs\n```\n\nRunning shell\n--------------\n\n```terminal\n$rebar3 shell\n```\n# Daftar isi\n\n- [Apa itu Erlang/OTP?](/s_doc/tentang_erlang.md)\n\n- [Apa itu OTP?](/s_doc/otp_erlang.md)\n\n- [Shell Erlang](/s_doc/shell_erlang.md)\n\n- [Sintaks Dasar Erlang](s_doc/sintaks_dasar_erlang.md)\n\n- [Tipe data Erlang](/s_doc/tipe_data_erlang.md)","ref":"readme.html#untuk-mengunduh-semua-plugin-silahkan-buka-terminal","title":"Untuk mengunduh semua plugin silahkan buka terminal - berpikir dalam erlang","type":"extras"},{"doc":"# Erlang / OTP\n\nErlang OTP (Open Telecom Platform) adalah sebuah sistem pengembangan terpadu yang dibangun di atas bahasa pemrograman Erlang. Erlang sendiri dirancang oleh Ericsson pada tahun 1986 untuk mengembangkan aplikasi yang memerlukan tingkat keandalan yang sangat tinggi, seperti sistem telekomunikasi. Karakteristik utama dari Erlang adalah kemampuannya dalam menangani sistem berskala besar, distribusi, dan fault-tolerance (toleran terhadap kegagalan) tanpa downtime.\n\nOTP merupakan kumpulan dari perpustakaan dan middleware yang dirancang untuk mendukung pembangunan aplikasi berskala besar di Erlang. Dengan OTP, pengembang dapat memanfaatkan pola desain yang sudah teruji, arsitektur aplikasi yang terstruktur, dan mekanisme yang efisien untuk pengelolaan kesalahan dan pemulihan dari kegagalan.\n\nBeberapa fitur utama dari Erlang OTP meliputi:\n\n- Concurrent Programming:\n \nErlang dirancang dengan model pemrograman konkuren yang kuat, memungkinkan eksekusi berbagai proses secara paralel dengan efisiensi tinggi dan isolasi yang baik antar proses.\n\n- Fault Tolerance:\n\nDengan mekanisme seperti supervisor trees, Erlang OTP memungkinkan aplikasi untuk pulih dari kegagalan tanpa mempengaruhi bagian lain dari sistem.\n\n- Hot Code Swapping:\n\nErlang OTP mendukung penggantian kode yang sedang berjalan tanpa perlu menghentikan sistem, yang sangat penting untuk sistem yang memerlukan ketersediaan tinggi.\n\n- Distributed Systems:\n\nErlang OTP memudahkan pembangunan sistem terdistribusi, memungkinkan aplikasi untuk berjalan dan berkomunikasi secara efisien di berbagai mesin.\n\n- Messaging:\n\nErlang menggunakan model komunikasi berbasis pesan, yang memungkinkan proses untuk berinteraksi satu sama lain secara asinkron dan tanpa membagi memori.\n\nErlang OTP sangat populer di industri telekomunikasi dan telah digunakan dalam berbagai sistem kritis lainnya, seperti perbankan, e-commerce, dan basis data real-time. Seiring waktu, popularitas Erlang OTP juga telah menyebar ke berbagai bidang yang membutuhkan skalabilitas tinggi, fault tolerance, dan kemampuan untuk menangani koneksi yang sangat banyak, seperti aplikasi chat, sistem antrean pesan, dan server game online.","ref":"tentang_erlang.html","title":"Erlang / OTP","type":"extras"},{"doc":"# Apa itu OTP ?\n\nOTP dalam konteks Erlang adalah singkatan dari \"Open Telecom Platform,\" meskipun sebenarnya aplikasi dan penggunaannya sudah jauh melampaui bidang telekomunikasi. OTP adalah kumpulan perpustakaan dan prinsip desain yang bertujuan untuk mendukung pembangunan aplikasi terdistribusi, fault-tolerant, soft-real-time, dan non-stop. Dengan menggunakan OTP, pengembang dapat memanfaatkan kerangka kerja yang kuat untuk membangun aplikasi yang memerlukan tingkat ketersediaan yang tinggi dan dapat menangani pemrosesan secara paralel dengan efisien.","ref":"otp_erlang.html","title":"Apa itu OTP ?","type":"extras"},{"doc":"OTP terdiri dari beberapa komponen utama, termasuk:\n\n- Behavior:\n\nModul-modul yang mendefinisikan pola umum untuk komponen sistem yang dapat digunakan kembali. Beberapa behavior yang paling sering digunakan adalah GenServer (server proses umum), Supervisor (untuk mengawasi dan mengelola proses anak), dan Application (kerangka kerja untuk memulai dan menghentikan aplikasi).\n\n- OTP Libraries: \n\nKumpulan perpustakaan yang menyediakan berbagai fungsi bantu dan abstraksi yang berguna untuk pengembangan aplikasi, seperti sistem pengelolaan database, komunikasi antar proses, dan pembuatan sistem file.\n\n- The Erlang Runtime System (ERTS): \n\nLingkungan runtime yang menyediakan kemampuan untuk menjalankan aplikasi Erlang/OTP, termasuk skeduler, pengumpul sampah, dan dukungan untuk operasi input/output.\n\n#","ref":"otp_erlang.html#komponen-utama-otp","title":"Komponen Utama OTP - Apa itu OTP ?","type":"extras"},{"doc":"Menggunakan OTP dalam proyek Erlang memberikan beberapa keuntungan signifikan, termasuk:\n\n- Fault Tolerance:\n\nKemampuan untuk mendesain sistem yang bisa terus berjalan meskipun terjadi kegagalan pada beberapa bagian komponennya.\n\n- Hot Code Swapping: \n\nMemungkinkan penggantian kode yang sedang berjalan dengan versi yang baru tanpa perlu menghentikan sistem.\n\n- Concurrency:\n\nOTP dirancang untuk mendukung konkurensi tingkat tinggi, memungkinkan aplikasi untuk menjalankan banyak tugas secara paralel dengan efisien.\n\n- Distribusi: \n\nMendukung pembangunan sistem terdistribusi yang dapat berjalan pada beberapa node secara transparan.\n    \n- Pola Desain yang Teruji: \n\nMenyediakan pola desain yang telah terbukti untuk membangun aplikasi yang kompleks dan berskala besar.\n\n# Aplikasi OTP\n\nMeskipun awalnya dirancang untuk industri telekomunikasi, OTP kini digunakan dalam berbagai bidang untuk membangun sistem yang memerlukan skalabilitas, ketersediaan tinggi, dan kemampuan untuk menangani kegagalan secara elegan. Beberapa contoh aplikasi yang menggunakan Erlang/OTP termasuk sistem perpesanan, database NoSQL, server web, dan platform cloud.\n\nDengan kata lain, OTP menyediakan kerangka kerja yang kaya dan kuat yang memungkinkan pengembang untuk membangun aplikasi yang robust, efisien, dan dapat diandalkan dengan lebih mudah dan cepat.","ref":"otp_erlang.html#keuntungan-menggunakan-otp","title":"Keuntungan Menggunakan OTP - Apa itu OTP ?","type":"extras"},{"doc":"# Shell Erlang\n\nShell Erlang merupakan lingkungan interaktif (REPL - Read-Eval-Print Loop) yang memungkinkan Anda untuk mengeksekusi perintah Erlang secara langsung, membuat prototipe cepat, dan bereksperimen dengan kode tanpa perlu mengkompilasi modul terlebih dahulu. Ini sangat berguna untuk pembelajaran, pengujian fungsi, dan debug. Berikut adalah beberapa dasar penggunaan shell Erlang.\nMemulai Shell Erlang\n\nUntuk memulai shell Erlang, cukup ketik `erl` di terminal atau command prompt. Anda akan melihat output seperti ini:\n\n```shell\n\nErlang/OTP 24 [erts-11.1] [source] [64-bit] [smp:8:8] ...\n\nEshell V11.1  (abort with ^G)\n1>\n```","ref":"shell_erlang.html","title":"Shell Erlang","type":"extras"},{"doc":"- **Ekspresi**. Anda dapat mengetikkan ekspresi Erlang apa pun dan menekan Enter untuk mengevaluasinya. Contoh:\n\n```erlang\n\n1> 3 + 4.\n7\n```\n- Variabel. Anda dapat mengikat nilai ke variabel (ingat bahwa variabel harus diawali dengan huruf besar). Variabel di shell dapat direset dengan perintah f().\n\n```erlang\n\n1> X = 10.\n10\n2> X.\n10\n3> f(X).\nok\n4> X.\n* 1: variable 'X' is unbound\n```\n- Fungsi. Anda dapat mendefinisikan fungsi sederhana langsung dalam shell, meski dengan sintaks yang agak terbatas dibandingkan dengan mendefinisikan fungsi dalam modul.\n\n```erlang\n\n1> F = fun(X) -> X * 2 end.\n#Fun \n2> F(10).\n20\n```\n- Modul. Untuk menggunakan fungsi dari modul, Anda harus memastikan bahwa modul tersebut sudah terkompilasi dan berada di path yang dapat ditemukan oleh Erlang.\n\n```erlang\n\n1> c(my_module).\n{ok,my_module}\n2> my_module:my_function().\n```\n\nKeluar dari Shell. Untuk keluar dari shell Erlang, tekan Ctrl+C dua kali atau gunakan perintah q()..\n\n```erlang\n\n    1> q().\n    ok\n    2> \n```\nFitur Lanjutan\n\n- Menggunakan Bantuan. Erlang shell tidak memiliki sistem bantuan built-in seperti beberapa REPL lain, tetapi dokumentasi Erlang secara online sangat lengkap.\n\n- History dan Autocomplete. Versi terbaru dari shell Erlang mendukung history command (menggunakan panah atas dan bawah) dan autocomplete fungsi dan modul dengan menekan Tab.\n\n- Mengelola Proses. Anda dapat memulai dan memantau proses Erlang langsung dari shell, menggunakan fungsi seperti spawn dan self.\n\nShell Erlang adalah alat yang sangat kuat untuk eksplorasi dan pengembangan cepat. Mempraktikkan Erlang melalui shell adalah cara yang bagus untuk mempelajari bahasa dan ekosistemnya dengan interaktif.","ref":"shell_erlang.html#dasar-dasar-perintah-shell","title":"Dasar-Dasar Perintah Shell - Shell Erlang","type":"extras"},{"doc":"# Sintaks Dasar Erlang\n\nErlang memiliki sintaks yang cukup unik dan ringkas yang mungkin terlihat asing bagi mereka yang terbiasa dengan bahasa pemrograman lain. Berikut adalah beberapa sintaks dasar dan konsep penting dalam Erlang untuk membantu Anda memulai:\n\n1. Variabel\n\n- Variabel di Erlang harus diawali dengan huruf kapital.\n\n- Variabel bersifat immutable, artinya sekali nilai telah di-assign, nilai tersebut tidak bisa diubah.\n\n```erlang\n\nName = \"Erlang\".\nCount = 10.\n```\n2. Atom\n\nAtom adalah konstanta yang namanya merupakan nilainya sendiri. Atom diawali dengan huruf kecil atau diapit dengan tanda petik ' jika mengandung spasi atau karakter khusus.\n\n```erlang\n\natom.\n'another atom'.\n```\n\n3. Tuples\n\nTuple digunakan untuk menyimpan sejumlah tetap elemen. Elemen-elemen dalam tuple dapat berupa tipe data apapun. Tuple ditulis dengan menggunakan kurung kurawal {}.\n\n```erlang\n\n{ok, 200, \"OK\"}.\n{error, \"NotFound\"}.\n```\n\n4. Lists\n\n    List digunakan untuk menyimpan sejumlah variabel elemen. List ditulis dengan menggunakan kurung siku [].\n\n```erlang\n\n[1, 2, 3, 4, 5].\n[\"erlang\", \"elixir\", \"otp\"].\n```\n\n5. String\n\nString di Erlang dinyatakan sebagai list dari karakter-karakter.\n\n```erlang\n\n\"Hello, World!\".\n```\n\n6. Fungsi\n\nFungsi didefinisikan dalam modul. Setiap fungsi diawali dengan kata kunci -export jika ingin diakses dari luar modul.\n\n```erlang\n\n-module(example).\n-export([say_hello/0]).\n\nsay_hello() ->\n    io:format(\"Hello, World!~n\").\n```\n7. Percabangan\n\nErlang menggunakan case...of untuk percabangan dan juga guard clauses untuk kondisi lebih kompleks.\n\n```erlang\n\ncase Variable of\n    pattern1 when Guard1 -> Expression1;\n    pattern2 -> Expression2;\n    _ -> DefaultExpression\nend.\n```\n8. Pengulangan\n\nErlang tidak memiliki konstruksi pengulangan tradisional seperti for atau while. Sebagai gantinya, pengulangan dicapai melalui rekursi.\n\n```erlang\n\nloop(0) -> ok;\nloop(N) ->\n    io:format(\"Loop iteration: ~p~n\", [N]),\n    loop(N-1).\n```\n\n9. Concurrent Programming\n\nErlang sangat baik dalam menangani pemrograman konkuren. Untuk membuat proses, Anda menggunakan fungsi spawn.\n\n```erlang\n\nspawn(module, function_name, [Arg1, Arg2, ...]).\n```\n\n10. Komentar\n\nKomentar di Erlang diawali dengan tanda %.\n\n```erlang\n\n% Ini adalah komentar\n```\nIni adalah pengenalan dasar terhadap sintaks Erlang. Erlang memiliki banyak fitur lanjutan, terutama terkait dengan pemrograman fungsional dan konkuren, yang membuatnya sangat cocok untuk sistem berskala besar dan aplikasi real-time.","ref":"sintaks_dasar_erlang.html","title":"Sintaks Dasar Erlang","type":"extras"},{"doc":"# Tipe Data Erlang\n\nErlang, sebagai sebuah bahasa pemrograman fungsional yang dirancang untuk sistem berskala besar dan aplikasi real-time, memiliki set tipe data yang khas dan efisien untuk pemrograman konkuren dan distribusi. Berikut ini adalah jenis-jenis tipe data dasar yang tersedia di Erlang:\n\n#","ref":"tipe_data_erlang.html","title":"Tipe Data Erlang","type":"extras"},{"doc":"Representasi bilangan bulat, bisa positif atau negatif. Erlang mendukung bilangan bulat berukuran sangat besar hingga batas memori.\n\n```\n42.\n-23.\n```\n\n#","ref":"tipe_data_erlang.html#1-integer","title":"1.Integer: - Tipe Data Erlang","type":"extras"},{"doc":"Tipe data untuk bilangan pecahan dengan presisi floating point double-precision.\n\n```\n3.14.\n-0.01.\n\n```\n#","ref":"tipe_data_erlang.html#2-float","title":"2.Float: - Tipe Data Erlang","type":"extras"},{"doc":"Atoms adalah konstan yang nama mereka adalah nilai mereka. Atom diawali dengan huruf kecil dan bisa mengandung underscore (_) atau @, dan beberapa karakter khusus lainnya. Contohnya adalah hello, foo, atau :'Hello World'. Atoms sering digunakan sebagai label.\n\n```\nhello.\nfoo.\n'An atom with spaces'.\n\n```\n\n#","ref":"tipe_data_erlang.html#3-atom","title":"3.Atom: - Tipe Data Erlang","type":"extras"},{"doc":"Di Erlang, true dan false adalah atoms, sehingga boolean pada dasarnya adalah atom.\n\n```\ntrue.\nfalse.\n\n```\n\n#","ref":"tipe_data_erlang.html#4-boolean","title":"4.Boolean: - Tipe Data Erlang","type":"extras"},{"doc":"Kumpulan nilai yang tetap jumlahnya yang bisa berisi tipe data apapun. Tuple ditulis dalam kurung kurawal, contohnya {1, {foo, bar}, true}.\n\n```\n{apple, 10}.\n{ok, \"File loaded\"}.\n{error, \"File not found\"}.\n\n```\n\n#","ref":"tipe_data_erlang.html#5-tuple","title":"5.Tuple: - Tipe Data Erlang","type":"extras"},{"doc":"Kumpulan nilai yang bisa berubah-ubah jumlahnya, bisa berisi tipe data apapun, termasuk list lain. List ditulis dalam kurung siku, contohnya [1, {foo, bar}, true]. List di Erlang adalah singly linked lists.\n\n```\n[1, 2, 3, 4, 5].\n[\"hello\", {ok, 123}, true].\n\n```\n\n#","ref":"tipe_data_erlang.html#6-list","title":"6.List: - Tipe Data Erlang","type":"extras"},{"doc":"Di Erlang, string direpresentasikan sebagai list dari karakter-karakter, di mana karakter-karakter tersebut adalah integer yang merepresentasikan nilai ASCII dari karakter tersebut. Contohnya, string \"hello\" adalah sama dengan list [104, 101, 108, 108, 111].\n\n```\n\"hello\".\n\"world\".\n\n```\n\n#","ref":"tipe_data_erlang.html#7-string","title":"7.String: - Tipe Data Erlang","type":"extras"},{"doc":"Data biner yang bisa digunakan untuk efisiensi penyimpanan atau pemrosesan data biner mentah. Binaries ditulis dengan syntax khusus, menggunakan tanda << >>, contohnya <<104, 101, 108, 108, 111>>.\n\n```\n<<72, 101, 108, 108, 111>>. % Equivalent to \"Hello\"\n<<0, 1, 2, 3>>.\n\n```\n\n#","ref":"tipe_data_erlang.html#8-binary","title":"8.Binary: - Tipe Data Erlang","type":"extras"},{"doc":"Koleksi key-value pairs di mana key dan value bisa berupa tipe data apapun. Maps adalah struktur data yang ditambahkan pada versi yang lebih baru dari Erlang untuk memudahkan penyimpanan dan akses data yang terstruktur. Ditulis dengan #{key => value}.\n\n```\n#{key1 => value1, key2 => value2}.\n#{name => \"Joe\", age => 45, status => active}.\n\n```\n\n#","ref":"tipe_data_erlang.html#9-map","title":"9.Map: - Tipe Data Erlang","type":"extras"},{"doc":"Sebuah identifier unik yang digunakan untuk mengidentifikasi proses dalam sistem Erlang. Pid ini penting untuk pemrograman konkuren dan distribusi di Erlang.\n\n```\nself().\n\n```\n\n#","ref":"tipe_data_erlang.html#10-pid-process-identifier","title":"10.Pid (Process Identifier): - Tipe Data Erlang","type":"extras"},{"doc":"Digunakan untuk berkomunikasi dengan dunia luar, seperti sistem file atau port jaringan.\n\nSama seperti Pid, port adalah identitas yang dibuat oleh Erlang runtime untuk komunikasi dengan dunia luar (misalnya, file atau soket jaringan). Tidak ada sintaksis literal untuk port; mereka diperoleh melalui operasi sistem tertentu.\n\n```\n\n```\n\n#","ref":"tipe_data_erlang.html#11-port","title":"11.Port: - Tipe Data Erlang","type":"extras"},{"doc":"Digunakan untuk membuat referensi unik yang tidak bisa dibandingkan kecuali dengan kesamaan.\n\n```\nmake_ref().\n\n```\n\nErlang mendesain tipe datanya untuk mendukung pengembangan aplikasi yang efisien, distribusi, dan fault-tolerant, dengan model pemrograman yang berfokus pada pemrosesan pesan yang tidak memiliki shared state.","ref":"tipe_data_erlang.html#12-reference","title":"12.Reference: - Tipe Data Erlang","type":"extras"},{"doc":"# Sistem Terdistribusi\n\nDistribusi di Erlang memungkinkan aplikasi berjalan di lebih dari satu node Erlang yang dapat berkomunikasi satu sama lain melalui jaringan. Ini sangat berguna untuk membangun sistem terdistribusi yang skalabel dan dapat diandalkan. Sebagai contoh, mari kita buat aplikasi sederhana yang terdiri dari dua node: satu node mengirim pesan ke node lainnya.\nPersiapan\n\nSebelum kita memulai, pastikan Erlang sudah terinstal di sistem Anda. Untuk menjalankan sistem terdistribusi Erlang, Anda perlu memulai Erlang dengan nama node yang diberikan dan pastikan kedua node tersebut bisa saling berkomunikasi.\n\nBuka dua terminal, satu untuk setiap node Erlang. Jalankan Erlang dengan nama node yang berbeda pada setiap terminal:\n\nTerminal 1:\n\n\n```\nerl -name node1@localhost -setcookie abc\n```\nTerminal 2:\n\n```\n\nerl -name node2@localhost -setcookie abc\n```\n\nKedua node menggunakan cookie yang sama (abc) untuk autentikasi.\nLangkah 1: Definisikan Modul dan Fungsi\n\nPada node pengirim, kita akan mendefinisikan sebuah modul sender dengan fungsi untuk mengirim pesan ke node penerima.\nPada Node Pengirim (Terminal 1)\n\n```erlang\n\n-module(sender).\n-export([send/1]).\n\n        send(ReceiverNode) ->\n            %% Pastikan node terhubung\n            net_adm:ping(ReceiverNode),\n            %% Kirim pesan ke proses receiver di node lain\n            {receiver, ReceiverNode} ! {self(), \"Hello from sender\"},\n            receive\n                Reply -> io:format(\"Received reply: ~p~n\", [Reply])\n            after 5000 ->\n                io:format(\"No reply received~n\")\n            end.\n```\n\nPada Node Penerima (Terminal 2)\n\nDi node penerima, kita mendefinisikan modul receiver yang memulai proses yang menunggu pesan dan membalasnya.\n\n```erlang\n\n-module(receiver).\n-export([start/0, loop/0]).\n\nstart() ->\n    register(receiver, spawn(fun loop/0)).\n\nloop() ->\n    receive\n        {From, Message} ->\n            io:format(\"Received: ~p~n\", [Message]),\n            From ! {thanks, \"Thanks for the message!\"}\n    end,\n    loop().\n```","ref":"distribusi_erlang.html","title":"Sistem Terdistribusi","type":"extras"},{"doc":"- Pada Node Penerima (Terminal 2)\n\n- Kompilasi receiver dan jalankan fungsi start/0:\n\n```erlang\n\nc(receiver).\nreceiver:start().\n```\nPada Node Pengirim (Terminal 1)\n\nKompilasi sender dan kirim pesan ke receiver di node lain menggunakan fungsi send/1. Gantikan NodeName dengan nama node penerima yang tepat (dalam kasus ini node2@localhost):\n\n```erlang\n\nc(sender).\nsender:send('node2@localhost').\n```\nAnda seharusnya melihat pesan yang dikirim dari node pengirim ke penerima, dan penerima membalas pesan tersebut. Demonstrasi ini menunjukkan dasar-dasar komunikasi antar-node dalam aplikasi Erlang yang terdistribusi. Erlang menjadikan pengembangan sistem terdistribusi lebih mudah dengan model pemrograman berbasis pesan yang kuat dan kemampuan untuk transparan mengelola proses di berbagai node.","ref":"distribusi_erlang.html#langkah-2-kompilasi-dan-jalankan-kode","title":"Langkah 2: Kompilasi dan Jalankan Kode - Sistem Terdistribusi","type":"extras"},{"doc":"# Membangun Sistem \n\nErlang adalah bahasa pemrograman yang dirancang untuk membangun sistem yang bersifat concurrent, fault-tolerant, dan scalable. Erlang sering digunakan dalam industri telekomunikasi, finansial, dan sistem pesan real-time karena kemampuannya yang unik dalam menangani ratusan ribu proses bersamaan dengan overhead yang rendah.\n\nBerikut adalah contoh sederhana dari sebuah sistem Erlang. Contoh ini melibatkan pembuatan server sederhana yang dapat menangani permintaan dari klien. Server ini akan menerima pesan, mencetak pesan tersebut ke console, dan mengirimkan balasan ke klien.\n\n1. Definisi Modul Server\n\n```erlang\n\n-module(echo_server).\n-behaviour(gen_server).\n\n%% API\n-export([start_link/0]).\n\n%% gen_server callbacks\n-export([init/1, handle_call/3, handle_cast/2, handle_info/2,\n         terminate/2, code_change/3]).\n\n-define(SERVER, ?MODULE).\n\nstart_link() ->\n    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).\n\ninit([]) ->\n    {ok, #{}}. % state is just an empty map\n\nhandle_call({send_echo, Msg}, _From, State) ->\n    io:format(\"Received message: ~p~n\", [Msg]),\n    {reply, {echo, Msg}, State};\n\nhandle_call(_Request, _From, State) ->\n    {reply, ok, State}.\n\nhandle_cast(_Msg, State) ->\n    {noreply, State}.\n\nhandle_info(_Info, State) ->\n    {noreply, State}.\n\nterminate(_Reason, _State) ->\n    ok.\n\ncode_change(_OldVsn, State, _Extra) ->\n    {ok, State}.\n```\n2. Definisi Modul Klien\n\n```erlang\n\n-module(echo_client).\n-export([send/1]).\n\nsend(Msg) ->\n    {ok, Pid} = echo_server:start_link(),\n    gen_server:call(Pid, {send_echo, Msg}).\n```\nCara Menjalankan:\n\n- Kompilasi Kode: \n\nPertama, Anda perlu mengkompilasi kedua modul tersebut dengan menggunakan perintah c(Module). di shell Erlang.\n\n```shell\n\n1> c(echo_server).\n2> c(echo_client).\n```\n- Menggunakan Klien: \n\nSetelah kedua modul berhasil dikompilasi, Anda dapat menggunakan fungsi send/1 dari modul echo_client untuk mengirim pesan ke server.\n\n```shell\n\n    3> echo_client:send(\"Hello, Erlang!\").\n```\n    \nDi sisi server, Anda akan melihat pesan \"Received message: 'Hello, Erlang!'\" dicetak ke console, dan klien akan menerima balasan {echo, \"Hello, Erlang!\"}.\n\nContoh di atas hanya permulaan dari apa yang bisa dilakukan dengan Erlang dalam membangun sistem yang bersifat concurrent dan fault-tolerant. Erlang memiliki ekosistem yang luas dengan berbagai library dan tools yang mendukung pembangunan sistem yang kompleks.","ref":"membangun_system.html","title":"Membangun Sistem","type":"extras"},{"doc":"# Map\n\nDi Erlang, tipe data map adalah struktur data yang sangat fleksibel dan kuat untuk menyimpan pasangan kunci-nilai, di mana setiap kunci unik terkait dengan sebuah nilai. Maps diperkenalkan di Erlang versi 17, memberikan cara yang lebih dinamis dan ekspresif untuk bekerja dengan data terstruktur dibandingkan dengan record yang lebih statis dan harus didefinisikan terlebih dahulu.\nMembuat Map\n\nUntuk membuat sebuah map, Anda menggunakan sintaks {} dengan elemen-elemen di dalamnya, di mana setiap elemen adalah sebuah pasangan kunci => nilai. Kunci dan nilai dapat berupa tipe data apa pun.\n\n```erlang\n\nMap1 = #{key1 => value1, key2 => value2}.\n```\nContoh\n\nBerikut adalah beberapa contoh sederhana penggunaan map di Erlang:\n\n1. Membuat dan Mengakses Map\n\n```erlang\n\n% Membuat map\nMap = #{name => \"John Doe\", age => 30, city => \"New York\"}.\n\n% Mengakses nilai menggunakan kunci\nName = Map#{name => _}.\nAge = Map#{age => _}.\n\nio:format(\"Name: ~p, Age: ~p~n\", [Name, Age]).\n```\n2. Menambah atau Memperbarui Nilai\n\nUntuk menambah atau memperbarui nilai dalam map, Anda bisa menggunakan sintaks maps:put/3 atau Map#{Key => Value} untuk pembaruan.\n\n```erlang\n\n% Menambah/memperbarui nilai\nMap2 = Map#{city => \"Los Angeles\"}.\n\n% Menambahkan nilai baru\nMap3 = Map2#{country => \"USA\"}.\n\nio:format(\"~p~n\", [Map3]).\n```\n3. Menghapus Kunci\n\nUntuk menghapus kunci (dan nilai terkait) dari map, gunakan maps:remove/2.\n\n```erlang\n\n% Menghapus kunci\nMap4 = maps:remove(city, Map3).\n\nio:format(\"~p~n\", [Map4]).\n```\n4. Iterasi Atas Map\n\nAnda dapat menggunakan maps:fold/3 untuk mengiterasi atas map, melakukan operasi pada setiap pasangan kunci-nilai.\n\nMakeup.Styles.HTML.StyleMap.abap_style()\n```erlang\n\n% Iterasi atas map dan cetak setiap kunci-nilai\nmaps:fold(fun(Key, Value, Acc) ->\n              io:format(\"Key: ~p, Value: ~p~n\", [Key, Value]),\n              Acc\n          end, ok, Map).\n```\nMaps sangat berguna untuk kasus-kasus di mana Anda perlu struktur data yang mudah diubah dan diakses secara dinamis dengan kunci yang berbeda-beda. Erlang menyediakan banyak fungsi bawaan dalam modul maps untuk bekerja dengan struktur data ini, termasuk pencarian, penambahan, pembaruan, dan penghapusan elemen, serta iterasi dan transformasi.","ref":"map_erlang.html","title":"Map","type":"extras"},{"doc":"Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   Copyright 2024, mukharomdev  .\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.","ref":"license.html","title":"LICENSE","type":"extras"}],"producer":{"name":"ex_doc","version":[48,46,51,49,46,50]}}